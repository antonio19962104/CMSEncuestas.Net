<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BL</name>
    </assembly>
    <members>
        <member name="T:BL.Administrador">
            <summary>
            Clase del modulo del administrador
            </summary>
        </member>
        <member name="P:BL.Administrador.Convert">
            <summary>
            Objeto de la clase MappingConfigurations
            </summary>
        </member>
        <member name="M:BL.Administrador.Autenticar(ML.Administrador)">
            <summary>
            Valida la existencia de un usuario administrador
            </summary>
            <param name="aAdministrador">Modelo con las claves de acceso del administrador</param>
            <returns>Objeto administrador</returns>
        </member>
        <member name="M:BL.Administrador.ValidaCambioPass(DL.Administrador)">
            <summary>
            Valida si el password ha expirado
            </summary>
            <param name="administrador"></param>
            <returns></returns>
        </member>
        <member name="M:BL.Administrador.ValidaCuentaBloqueada(DL.Administrador)">
            <summary>
            Valida si la cuenta ha sido bloqueada
            </summary>
            <param name="administrador"></param>
            <returns></returns>
        </member>
        <member name="T:BL.Documentacion">
            <summary>
            Documentación del proyecto
            </summary>
        </member>
        <member name="M:BL.Documentacion.GetBussinessLayerDocumentation">
            <summary>
            Obtiene un objeto con la documentación de la capa de negocios
            </summary>
            <returns>Objeto con la documentacion de la capa de negocios</returns>
        </member>
        <member name="M:BL.Documentacion.GetDataLayerDocumentation">
            <summary>
            Obtiene un objeto con la documentación de la capa de datos
            </summary>
            <returns>Objeto con la documentacion de la capa de datos</returns>
        </member>
        <member name="M:BL.Documentacion.GetModelLayerDocumentation">
            <summary>
            Obtiene un objeto con la documentación de la capa de modelo
            </summary>
            <returns>Objeto con la documentacion de la capa de modelo</returns>
        </member>
        <member name="M:BL.Documentacion.GetPresentationLayerDocumentation">
            <summary>
            Obtiene un objeto con la documentación de la capa de presentación
            </summary>
            <returns>Objeto con la documentacion de la capa de presentación</returns>
        </member>
        <member name="M:BL.Documentacion.Deserialize``1(System.String)">
            <summary>
            Deserializa un xml a un objeto c#
            </summary>
            <typeparam name="T">Instancia del objeto especificado en la llamada al método</typeparam>
            <param name="input">Cadena xml</param>
            <returns>Objeto</returns>
        </member>
        <member name="M:BL.Documentacion.Serialize``1(``0)">
            <summary>
            Serializa un objeto c# a un xml
            </summary>
            <typeparam name="T">Instancia del objeto especificado en la llamada al método</typeparam>
            <param name="ObjectToSerialize">Objeto c# a serializar</param>
            <returns>XML del objeto</returns>
        </member>
        <member name="T:BL.Generales">
            <summary>
            Contiene metodos que se usan de manera general en la solucion
            </summary>
        </member>
        <member name="M:BL.Generales.GetEntity``1(System.Data.DataRow)">
            <summary>
            convierte un DataSet a entidades Entity Framework
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <returns>objeto del del namespace DL</returns>
        </member>
        <member name="M:BL.Generales.print_r``1(System.Collections.Generic.List{``0},System.Diagnostics.StackTrace)">
            <summary>
            itera los valores de una lista de objetos e imprime los valores de las propiedades en un log
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="st"></param>
            <returns></returns>
        </member>
        <member name="M:BL.Generales.print_r``1(System.Object,System.Diagnostics.StackTrace)">
            <summary>
            itera las propiedades de un objeto y las imprime en un log
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="st"></param>
            <returns></returns>
        </member>
        <member name="M:BL.Generales.GetBase64FromFile(System.String)">
            <summary>
            Get base64 string for specified image
            </summary>
            <param name="path"></param>
            <returns>base64 string for specified image</returns>
        </member>
        <member name="M:BL.Generales.CrearImagenEnDirectorio(System.String,System.Int32)">
            <summary>
            Create file image in specified location
            </summary>
            <param name="cadenaBase64"></param>
            <param name="IdProductoIntercambiable"></param>
            <returns>string path image</returns>
        </member>
        <member name="M:BL.Generales.GetBase64ValidData(System.String)">
            <summary>
            Construct valid base64 string
            </summary>
            <param name="cadena"></param>
            <returns>Valid base 64 string</returns>
        </member>
        <member name="M:BL.Generales.GetBase64Extension(System.String)">
            <summary>
            Get extension of base64 image
            </summary>
            <param name="cadena"></param>
            <returns>Extension of base64 image</returns>
        </member>
        <member name="T:BL.Login">
            <summary>
            Clase del Modulo de seguridad
            </summary>
        </member>
        <member name="M:BL.Login.Autenticar(ML.Administrador,System.String,System.String)">
            <summary>
            Autentica un usuario administrador
            </summary>
            <param name="aAdministrador">Modelo con las claves de acceso del administrador</param>
            <returns>Token del usuario admnistrador</returns>
        </member>
        <member name="M:BL.Login.GetCadenaAdminToEncrypt(System.Object)">
            <summary>
            Crea la porcion de la cadena a encriptar con los datos del administrador
            </summary>
            <param name="aAdministrador"></param>
            <returns>Porcion de cadena a encriptar</returns>
        </member>
        <member name="M:BL.Login.GetCadenaWorkSpaceToEncrypt(System.Collections.Generic.List{ML.WorkSpace})">
            <summary>
            Crea la porcion de la cadena a encryptar con los datos de espacio de trabajo
            </summary>
            <param name="aWorkSpace"></param>
            <returns>Porcion de cadena a encriptar</returns>
        </member>
        <member name="T:BL.MappingConfigurations">
            <summary>
            Clase del modulo Mapping Configurations
            </summary>
        </member>
        <member name="M:BL.MappingConfigurations.ToModelAdministrador(DL.Administrador)">
            <summary>
            Mapea un objeto DL Administrador a un Objeto ML Administrador
            </summary>
            <param name="dlAdministrador">Objeto DL Administrador</param>
            <returns>Objeto ML Administrador</returns>
        </member>
        <member name="M:BL.MappingConfigurations.ToModelWorkSpace(DL.WorkSpace)">
            <summary>
            Mapea un objeto DL WorkSpace a un Objeto ML WorkSpace
            </summary>
            <param name="dlWorkSpace">Objeto DL Administrador</param>
            <returns>Objeto ML WorkSpace</returns>
        </member>
        <member name="M:BL.MappingConfigurations.ToDLEncuesta(ML.Encuesta)">
            <summary>
            Mapea un objeto ML Encuesta a un Objeto DL Encuesta
            </summary>
            <param name="encuesta"></param>
            <returns></returns>
        </member>
        <member name="T:BL.Nlog">
            <summary>
            Contiene los métodos de creación de logs por módulos
            </summary>
        </member>
        <member name="F:BL.Nlog.nLogModuloSeguridad">
            <summary>
            Instancia de un log para el modulo de Seguridad
            </summary>
        </member>
        <member name="F:BL.Nlog.nLogModuloMappingConfigurations">
            <summary>
            Instancia de un log para el modulo MappingConfigurations
            </summary>
        </member>
        <member name="F:BL.Nlog.nLogModuloWorkSpace">
            <summary>
            Instancia de un log para el modulo WorkSpace
            </summary>
        </member>
        <member name="F:BL.Nlog.nLogModuloSenderEmail">
            <summary>
            Instancia de un log para el modulo SenderEmail
            </summary>
        </member>
        <member name="F:BL.Nlog.nLogAccess">
            <summary>
            Instancia de un log para el control de accesos al sitio
            </summary>
        </member>
        <member name="F:BL.Nlog.nlogData">
            <summary>
            Instancia de un log para la impresion de datos
            </summary>
        </member>
        <member name="F:BL.Nlog.nlogModuloEncuesta">
            <summary>
            Instancia de un log para el modulo de Encuesta
            </summary>
        </member>
        <member name="F:BL.Nlog.nlogModuloPregunta">
            <summary>
            Instancia de un log para el modulo de Pregunta
            </summary>
        </member>
        <member name="M:BL.Nlog.logErrorModuloSeguridad(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Escritura de un log para el modulo de Seguridad
            </summary>
            <param name="aE"></param>
            <param name="aSt"></param>
        </member>
        <member name="M:BL.Nlog.logErrorMappingConfigurations(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Escritura de un log para el modulo MappingConfigurations
            </summary>
            <param name="aE"></param>
            <param name="aSt"></param>
        </member>
        <member name="M:BL.Nlog.logErrorModuloWorkSpace(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Escritura de un log para el modulo WorkSpace
            </summary>
            <param name="aE"></param>
            <param name="aSt"></param>
        </member>
        <member name="M:BL.Nlog.logErrorModuloSenderEmail(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Escritura de un log para el modulo SenderEmail
            </summary>
            <param name="aE"></param>
            <param name="aSt"></param>
        </member>
        <member name="M:BL.Nlog.logErrorModuloEncuesta(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Escritura de un log para el modulo Encuesta
            </summary>
            <param name="aE"></param>
            <param name="aSt"></param>
        </member>
        <member name="M:BL.Nlog.logErrorModuloPreguntas(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Escritura de un log para el modulo Preguntas
            </summary>
            <param name="aE"></param>
            <param name="aSt"></param>
        </member>
        <member name="M:BL.Nlog.logAccess(ML.Administrador,System.String)">
            <summary>
            Escritura de un log para el control de los accesos
            </summary>
            <param name="aAdministrador"></param>
            <param name="IPAdress"></param>
        </member>
        <member name="M:BL.Nlog.logData(System.String)">
            <summary>
            Escritura de un log para imprimir datos
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:BL.Seguridad">
            <summary>
            Clase encargada de implementar la encriptacion dentro de los password de 
            los usuarios de Autosyst XXI
            </summary>
        </member>
        <member name="M:BL.Seguridad.EsPasswordValidoFailSafe(System.String,System.String)">
            <summary> Si el password no está encriptado lo compara en texto plano </summary>
        </member>
        <member name="M:BL.Seguridad.EsPasswordValido(System.String,System.String)">
            <summary> Si el password no está encriptado lanzará error </summary>
        </member>
        <member name="T:BL._Encrypt">
            <summary>
            Clase de encriptación de cadenas
            </summary>
        </member>
        <member name="M:BL._Encrypt.Encrypt(System.String,System.String)">
            <summary>
            Encrypta la cadena especificada
            </summary>
            <param name="plainText">Cadena a encriptar</param>
            <param name="passPhrase">Pass de la cadena a encriptar</param>
            <returns>Cadena encriptada</returns>
        </member>
        <member name="M:BL._Encrypt.Decrypt(System.String,System.String)">
            <summary>
            Desencripta la cadena especificada
            </summary>
            <param name="cipherText">Cadena a desencriptar</param>
            <param name="passPhrase">Pass de la cadena a desencriptar</param>
            <returns>Cadena desencriptada</returns>
        </member>
        <member name="T:Decryptor">
             <summary>
             This class is used to decrypt strings using one of the 4 
             symmetric algorithms - 3DES, DES, RC2 or Rijndael.
             </summary>
             <remarks>
              When creating an
             instance of this class, you must pass the algorithm to use in the 
             constructor: see <see cref="T:EncryptionAlgorithm"/>.  Optionally, if the encrypted string ws hex formatted,
             you can reformat the input string before decrypting.
             
             This class is based on principles from the Patterns and Practices guide: 
             How To: Create an Encryption Library 
             by J.D. Meier, Alex Mackman, Michael Dunner, and Srinath Vasireddy 
             Microsoft Corporation
            </remarks>
        </member>
        <member name="M:Decryptor.#ctor(EncryptionAlgorithm)">
            <summary>
            The constructor
            </summary>
            <param name="algId">The Algorithm to use</param>
        </member>
        <member name="M:Decryptor.Decrypt(System.String,System.String,System.String)">
            <summary>
            Takes an encrypted string and returns an unencrypted
            string, given the string to decrypt, the algorithm,
             key and intial vector.
            </summary>
            <param name="StringToDecrypt">An encrypted string</param>
            <param name="key">The key used in encryption</param>
            <param name="IV">The Initial Vector used in encryption</param>
            <returns></returns>
        </member>
        <member name="M:Decryptor.CreateByteArray(System.String)">
            <summary>
            Creates a byte array for decryption from the input string.
            If the string has been formatted as hex, FormatAsHex should
            set to be true and the string will be converted from hex
            before creating the byte array. 
            </summary>
            <param name="StringToDecrypt">The encrypted string</param>
            <returns>A byte array from the encrypted string</returns>
        </member>
        <member name="P:Decryptor.FormatAsHex">
            <summary>
            If true (default), input string will be treated as hex and decoded before decryption
            </summary>
        </member>
        <member name="T:DecryptTransformer">
            <summary>
            Creates the proper Service Provider for the EncryptionAlgorithm
            </summary>
        </member>
        <member name="M:DecryptTransformer.#ctor(EncryptionAlgorithm)">
            <summary>
            Constructor
            </summary>
            <param name="deCryptId">The EncryptionAlgorithm</param>
        </member>
        <member name="M:DecryptTransformer.GetCryptoServiceProvider(System.Byte[])">
            <summary>
            Returns the proper Service Provider. Sets the key and IV of
            the provider. If no key and IV were passed, a random key and/or
            IV are created (not very useful for decryption!).
            </summary>
            <param name="bytesKey">A byte array of the key</param>
            <returns>A CryptoServiceProvider for the EncryptionAlgorithm</returns>
        </member>
        <member name="P:DecryptTransformer.IV">
            <summary>
            The IV as an array of bytes
            </summary>
        </member>
        <member name="T:Encryptor">
            <summary>
            The Encryptor class handles encryption of a string using one of the 4 
            symmetric algorithms - 3DES, DES, RC2 or Rijndael. 
            </summary>
            <remarks>
            When creating an
            instance of this class, you must pass the algorithm to use in the 
            constructor: see <see cref="T:EncryptionAlgorithm"/>. Optionally, you can set the output to be formatted as
            hex through the FormatAsHex property.
            
            This class is based on principles from the Patterns and Practices guide: 
            How To: Create an Encryption Library 
            by J.D. Meier, Alex Mackman, Michael Dunner, and Srinath Vasireddy 
            Microsoft Corporation</remarks>
        </member>
        <member name="M:Encryptor.#ctor(EncryptionAlgorithm)">
            <summary>
            Class constructor
            </summary>
            <param name="algId">The encryption algorithm to use</param>
        </member>
        <member name="M:Encryptor.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypts a string using the algorithm supplied in
            the class constructor using the provided key and
            initial vector.
            </summary>
            <remarks>Note that the length and composition of the key and IV
            are algorithm dependent. For example, 3DES requires a 16 or 24 byte key,
            whereas DES requires an 8 byte key. See <see cref="M:Encryptor.GetKey"/>
            and <see cref="M:Encryptor.GetIV"/></remarks>
            <param name="StringToEncrypt">The string to be encrypted</param>
            <param name="key">The key to use for encryption. The same key will
            be used for decryption.</param>
            <param name="IV">THe Initial Vector to use. The same IV will be
            used for decryption</param>
            <returns>An encrypted string. If FormatAsHex has been set,
            the string will be hex encoded.</returns>
        </member>
        <member name="M:Encryptor.CreateCipherString(System.Byte[])">
            <summary>
            Creates a string from the encrypted byte array. If
            FormatAsHex is true, a hex formattted string will
            be returned. Formatting as hex can make storage in a
            database simpler as only legal characters will be output.
            </summary>
            <param name="BytesToConvert">The array of encrypted bytes</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:Encryptor.GetKey">
            <summary>
            A new key which can be used for encryption.
            </summary>
            <remarks>This method allows the creation of valid keys
            for the selcted algorithm. The format and length of a key
            is dependent on the algorithm, so use this method to get
            a valid key and then use this key in the Encrypt / Decrypt
            methods.</remarks>
            <returns>A new, valid, algorithm specific key as a string.</returns>
        </member>
        <member name="M:Encryptor.GetIV">
            <summary>
            A new Initial Vector to use for encryption
            </summary>
            <remarks>This method allows the creation of valid Initial
            Vectors for the selcted algorithm. The format and length of an IV
            is dependent on the algorithm, so use this method to get
            a valid IV and then use this key in the Encrypt / Decrypt
            methods.</remarks>
            <returns>A new, valid, algorithm dependent IV as a string</returns>
        </member>
        <member name="P:Encryptor.IV">
            <summary>
            The current Initial Vector used in Encryption
            </summary>
        </member>
        <member name="P:Encryptor.Key">
            <summary>
            The current Key being used in Encryption
            </summary>
        </member>
        <member name="P:Encryptor.FormatAsHex">
            <summary>
            If true (default) output will be formatted as hex.
            </summary>
        </member>
        <member name="T:EncryptionAlgorithm">
            <summary>
            The Encryption algorithm to use
            </summary>
        </member>
        <member name="F:EncryptionAlgorithm.Des">
            <summary>
            Use <see cref="T:System.Security.Cryptography.DES"/> 
            </summary>
        </member>
        <member name="F:EncryptionAlgorithm.Rc2">
            <summary>
            Use <see cref="T:System.Security.Cryptography.RC2"/>
            </summary>
        </member>
        <member name="F:EncryptionAlgorithm.Rijndael">
            <summary>
            Use <see cref="F:EncryptionAlgorithm.Rijndael"/>
            </summary>
        </member>
        <member name="F:EncryptionAlgorithm.TripleDes">
            <summary>
            Use <see cref="T:System.Security.Cryptography.TripleDES"/>
            </summary>
        </member>
        <member name="T:EncryptTransformer">
            <summary>
            This class is used to return a Crypto Provider of the type
            specified.
            
            </summary>
            <remarks>
            This class is based on the principles from Patterns and Practices guide: 
            How To: Create an Encryption Library 
            by J.D. Meier, Alex Mackman, Michael Dunner, and Srinath Vasireddy 
            Microsoft Corporation
            </remarks>
        </member>
        <member name="F:EncryptTransformer.algorithmID">
            <summary>
            The Algorithn to use
            </summary>
        </member>
        <member name="F:EncryptTransformer.initVec">
            <summary>
            The Initial vector to use
            </summary>
        </member>
        <member name="F:EncryptTransformer.encKey">
            <summary>
            The encryption key to use
            </summary>
        </member>
        <member name="M:EncryptTransformer.#ctor(EncryptionAlgorithm)">
            <summary>
            Constructor
            </summary>
            <param name="algId">The Algorithm to use</param>
        </member>
        <member name="M:EncryptTransformer.GetCryptoServiceProvider(System.Byte[])">
            <summary>
            Returns the proper Service Provider. Sets the key and IV of
            the provider. If no key and/or IV were passed, a random key and/or
            IV are created. They can then be retrieved from the <see cref="P:Encryptor.Key"/>
            and <see cref="P:Encryptor.IV"/> properties. (Do not call <see cref="M:Encryptor.GetKey"/> 
            or <see cref="M:Encryptor.GetIV"/> as
            these create <i>new</i> keys).
            </summary>
            <param name="bytesKey"></param>
            <returns></returns>
        </member>
        <member name="P:EncryptTransformer.IV">
            <summary>
             The IV as an array of bytes
            </summary>
        </member>
        <member name="P:EncryptTransformer.Key">
            <summary>
            THe key as an array of bytes
            </summary>
        </member>
    </members>
</doc>
